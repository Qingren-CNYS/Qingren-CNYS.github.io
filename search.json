[{"title":"25summer - d1","url":"/posts/34045630/","content":"<h1 id=\"Day1-幼儿园小班数据结构\"><a href=\"#Day1-幼儿园小班数据结构\" class=\"headerlink\" title=\"Day1 幼儿园小班数据结构\"></a>Day1 幼儿园小班数据结构</h1><p>数据结构有一个很神秘的定义。所以我们需要明白：数据结构并不唯一，在拿到一道模板题的时候，我们似乎需要首先思考一个<em>抽象数据结构</em></p>\n<h3 id=\"幼儿园第一课！并查集？\"><a href=\"#幼儿园第一课！并查集？\" class=\"headerlink\" title=\"幼儿园第一课！并查集？\"></a>幼儿园第一课！并查集？</h3><p>有一个抽象定义：</p>\n<ul>\n<li>将两个元素所在 u ,v 所在的集合合并</li>\n<li>判断两个元素 u ,v 是否在同一集合</li>\n</ul>\n<p>由于这个操作2，其操作很弱，维护的信息量很小，故并查集合理！</p>\n<p>f(i) &#x3D;&gt; i 所在元素代表元，那么 f(u) &#x3D; f(v)  &#x3D;&gt;  u 和 v 在同一集合当中。</p>\n<p>路径压缩的实质：</p>\n<p>修改了 f(u) 的定义：引用元。具体来说，f(u) 和 u 在同一内。于是这个时候一个集合就可以代表一棵树（其实是一个基环树，因为在根节点处有一个自环）。于是一次 merge 的意义就是：一棵树接到另一棵树上。并查集就是维护一个森林，且不在意结构。</p>\n<h5 id=\"按秩合并\"><a href=\"#按秩合并\" class=\"headerlink\" title=\"按秩合并\"></a>按秩合并</h5><p>小的集合合并到大的集合上去。所以可以证明时间复杂度 O(nlogn)</p>\n<p>why？ 一次操作：新集合大小 &gt; 小的老集合大小*2 ，无论如何跳 logn 次，叶子结点都可以跳到根节点。于是证完了。</p>\n<p>耳熟能详：</p>\n<p>按秩合并 + 路劲压缩 ： O(α(n)n)  ，基本可以将反阿克曼函数视为常数。所以复杂度基本视为线性。</p>\n<h5 id=\"神秘例题1\"><a href=\"#神秘例题1\" class=\"headerlink\" title=\"神秘例题1\"></a>神秘例题1</h5><p>思路：并查集维护下一个0的位置！有点帅，反正如果下一个数是0的话不管他，如果不是0的话就可以直接接到后面去。如此传递的并同化的感觉就很并查集。</p>\n<p>好像ODT也可以？</p>\n<p>类似题目：<a href=\"https://www.luogu.com.cn/problem/P2391\">P2391 白雪皑皑</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">ll n ,m ,p ,q ,ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(ll n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        n *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">9</span>) <span class=\"built_in\">print</span>(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(n % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ll f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">find</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[x] == x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[x] = <span class=\"built_in\">find</span>(f[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">merge</span><span class=\"params\">(ll x ,ll y)</span> </span>&#123;</span><br><span class=\"line\">    ll nx = <span class=\"built_in\">find</span>(x) ,ny = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nx != ny) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nx &gt; ny) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(nx ,ny);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f[nx] = ny;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lld %lld&quot;</span> ,&amp;n ,&amp;m ,&amp;p ,&amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;i&lt;=n ;i++) &#123; </span><br><span class=\"line\">        f[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i= m;i&gt;=<span class=\"number\">1</span> ;i--) &#123;</span><br><span class=\"line\">        ll l = (i * p + q) % n + <span class=\"number\">1</span> ,r = (i * q + p) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &gt; r) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(l ,r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=r ;j&gt;=l;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == <span class=\"built_in\">find</span>(j)) &#123;</span><br><span class=\"line\">                ans[j] = i;</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">find</span>(j<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j = <span class=\"built_in\">find</span>(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;i&lt;=n ;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(ans[i]);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"神秘例题2\"><a href=\"#神秘例题2\" class=\"headerlink\" title=\"神秘例题2\"></a>神秘例题2</h5><p>首先，我们知道连一条边就直接把这个环变成一个点。但是这个时候树形态已经变了，所以使用LCT！！！</p>\n<p>其实就是把这个环染色一下：(lca ,u) 与 (lca ,v) 染色。怎么快速染色？用神秘例题1的思路，对于每个结点去维护自己到根节点的链上最深的一个没染成自己颜色的。</p>\n<h5 id=\"神秘例题3\"><a href=\"#神秘例题3\" class=\"headerlink\" title=\"神秘例题3\"></a>神秘例题3</h5><p>这下看懂了。必须会！！！全新名词：拓展域并查集！！。</p>\n<p>一点拆成两个点 -&gt; 它为0 &#x2F; 它为1。一个并查集：同时为真，同时为假。三值逻辑就是这样的 trick。</p>\n<p>二分图好像可以更快，帅的要命！</p>\n<h5 id=\"可撤销并查集\"><a href=\"#可撤销并查集\" class=\"headerlink\" title=\"可撤销并查集\"></a>可撤销并查集</h5><p>不作路径压缩，只作按秩合并！！</p>\n<p>然后拿一个栈记录每一次操作是怎么改的，然后改回去就行了。</p>\n<h3 id=\"第二课！倍增与ST表\"><a href=\"#第二课！倍增与ST表\" class=\"headerlink\" title=\"第二课！倍增与ST表\"></a>第二课！倍增与ST表</h3><p>Table - 二维矩阵，而稀疏表就是稀疏的Table。</p>\n<p>闲话环节：AI底层是矩阵乘法，优化？稀疏矩阵矩阵乘法，用链式前向星存储矩阵，遍历一遍只需要乘上非0矩阵！</p>\n<h5 id=\"神秘例题1-1\"><a href=\"#神秘例题1-1\" class=\"headerlink\" title=\"神秘例题1\"></a>神秘例题1</h5><p><a href=\"https://www.luogu.com.cn/problem/P3295\">神秘原题</a></p>\n<p>首先考虑怎么打暴力：l1 r1连边 l2 r2 连边，并查集查询联通块个数。如果和第一个数字在同一个联通块内那么答案要乘9，否则乘10</p>\n<p>我们发现连边操作是一整个区间一整个区间连边的，所以可以使用rmq算法进行merge操作：st表。</p>\n<p>具体来说，将这个区间拆成长度为 2^n 的数个小块，记录下这个小块的转移情况。全部转移完之后模拟线段树的pushdown操作将标记全部下传。因为并查集的 merge 操作相当自由，顺序一点关系没有，所以每次动一个操作直接 merge 一下不需要顾虑。</p>\n<p>程序有一些细节。比如查询任何值之前都要先 find 一下，因为这个点 100 -&gt; 80 了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">5e5</span> + <span class=\"number\">10</span> ,M = <span class=\"number\">30</span> ,Q = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">ll n ,m ,t[N] ,ans = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll f[N][M];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">find</span><span class=\"params\">(ll x ,ll k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[x][k] == x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[x][k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[x][k] = <span class=\"built_in\">find</span>(f[x][k] ,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(ll x ,ll y ,ll k)</span> </span>&#123;</span><br><span class=\"line\">    ll nx = <span class=\"built_in\">find</span>(x ,k) ,ny = <span class=\"built_in\">find</span>(y ,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nx &lt; ny) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(nx ,ny);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout&lt;&lt;nx&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class=\"line\">    f[nx][k] = ny;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld&quot;</span> ,&amp;n ,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;i&lt;=n ;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span> ;j&lt;=<span class=\"number\">25</span> ;j++) &#123;</span><br><span class=\"line\">            f[i][j] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;i&lt;=m ;i++) &#123;</span><br><span class=\"line\">        ll l1 ,r1 ,l2 ,r2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lld %lld&quot;</span> ,&amp;l1 ,&amp;r1 ,&amp;l2 ,&amp;r2);</span><br><span class=\"line\">        ll tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">25</span> ;j&gt;=<span class=\"number\">0</span> ;j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l1 + tmp + (<span class=\"number\">1</span>&lt;&lt;j) - <span class=\"number\">1</span> &lt;= r1) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">merge</span>(l1 + tmp ,l2 + tmp,j);</span><br><span class=\"line\">                <span class=\"comment\">//cout&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">                tmp += (<span class=\"number\">1</span>&lt;&lt;j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">25</span> ;j&gt;=<span class=\"number\">1</span> ;j--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;(i + (<span class=\"number\">1</span>&lt;&lt;j))<span class=\"number\">-1</span> &lt;= n ;i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout&lt;&lt;i&lt;&lt;&quot;AAAA&quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">            ll fin = <span class=\"built_in\">find</span>(i ,j);</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(i ,fin ,j<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(i + (<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>)),fin + (<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>)) ,j<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout&lt;&lt;&quot;Sycamore_TY\\n&quot;;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span> ;i&lt;=n ;i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;MikuMayus&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;f[i][0]&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[<span class=\"built_in\">find</span>(f[i][<span class=\"number\">0</span>] ,<span class=\"number\">0</span>)] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(f[i][<span class=\"number\">0</span>] ,<span class=\"number\">0</span>) == <span class=\"built_in\">find</span>(f[<span class=\"number\">1</span>][<span class=\"number\">0</span>] ,<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                ans = (ans * <span class=\"number\">9</span>) % Q;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = (ans * <span class=\"number\">10</span>) % Q;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//cout&lt;&lt;f[i][0]&lt;&lt;endl;</span></span><br><span class=\"line\">            t[<span class=\"built_in\">find</span>(f[i][<span class=\"number\">0</span>] ,<span class=\"number\">0</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span> ,ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"神秘例题2-1\"><a href=\"#神秘例题2-1\" class=\"headerlink\" title=\"神秘例题2\"></a>神秘例题2</h5><p>快速求出一个 popcount?</p>\n<p>使用一个极其玄学逆天的方法。</p>\n<p>我们将二进制的每个1向右推，推到最后边。这样最后的值就是popcount</p>\n<p>怎么推？与上010101010101，全逼到两位中后一位上，然后与00110011，0000111100001111……直到全部逼到后n&#x2F;2上</p>\n<h3 id=\"第三课！Kruskal重构树\"><a href=\"#第三课！Kruskal重构树\" class=\"headerlink\" title=\"第三课！Kruskal重构树\"></a>第三课！Kruskal重构树</h3><p>并查集在合并集合的时候是直接加一条边上去。</p>\n<p>那么有没有别的做法呢？ 找到 u ,v 所在树的根节点 u’ ,v’，新建一个结点z 作为u’ ,v’ 的父亲。</p>\n<p>一言以蔽之思路：并查集，暴力赋值代表元！</p>\n<p>一个奇怪的理解：用小根堆来描述点和点之间的关系。</p>\n<h5 id=\"神秘例题1-2\"><a href=\"#神秘例题1-2\" class=\"headerlink\" title=\"神秘例题1\"></a>神秘例题1</h5><p><a href=\"https://oi-wiki.org/topic/dsu-app/\">里面有一个奇怪C题</a></p>\n<p>我们假装动态倍增！！！我们假装合理！！！</p>\n<p>于是每次合并两个点，就是给两个点的代表元连边。然后记下来时间和size，因为从结点到根节点，i一定单调递增，然后在上面倍增（二分）。</p>\n<p>然后……有一个……抽象的动态倍增做法……好在它只会往上……也不是很好……但是可以记录深度为2^k的所有结点……开vector记录……然后……动态……倍……增……每个点只会被定一次2^k，所以</p>\n<p>不想写了。</p>\n<h3 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h3><p>开始吟唱：我们现在有一只小蚂蚁，蚂蚁开始爬。它们要吃糖，然后拉出两个一模一样的糖！不能拉出肘香，否则就不满足双半群性质了！</p>\n<p>证明一个区间表示的节点数上限？mid左右各自二进制拆分，那么最多只有 logn 位。</p>\n<p>强调：Tag一定要有单位元，Info可以没有单位元。</p>\n<h3 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h3><p>线段树可以进行区间修改，可以进行一个推式子得到我们维护 f_i 和 f_i*i 就可以直接推出前缀和，于是区间修改转化为单点修改。</p>\n<p>有点厉害。</p>\n<p>code：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//init</span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\">const int N = 1e6+10;</span><br><span class=\"line\">ll b[N] ,hx[N] ,ns[N];</span><br><span class=\"line\">ll n,m; //main</span><br><span class=\"line\"></span><br><span class=\"line\">ll lowbit(ll x)&#123;</span><br><span class=\"line\">\treturn x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//建树</span><br><span class=\"line\">void add(ll x,ll y,ll n)&#123;</span><br><span class=\"line\">\tfor(ll i=x;i&lt;=n;i+=lowbit(i))&#123;</span><br><span class=\"line\">\t\thx[i]+=y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void add2(ll x,ll y,ll n)&#123;</span><br><span class=\"line\">\tfor(ll i=x;i&lt;=n;i+=lowbit(i))&#123;</span><br><span class=\"line\">\t\tb[i]+=y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//查询--前缀和</span><br><span class=\"line\">ll query(ll x)&#123;</span><br><span class=\"line\">\tll ans = 0;</span><br><span class=\"line\">\tfor(ll i=x;i;i-=lowbit(i))&#123;</span><br><span class=\"line\">\t\tans+=hx[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ll query2(ll x)&#123;</span><br><span class=\"line\">\tll ans = 0;</span><br><span class=\"line\">\tfor(ll i=x;i;i-=lowbit(i))&#123;</span><br><span class=\"line\">\t\tans+=b[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\t//input</span><br><span class=\"line\">\tll n,m;</span><br><span class=\"line\">\tscanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class=\"line\">\tll tmp ,la = 0; //存放输入</span><br><span class=\"line\">\tfor(ll i=1;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tscanf(&quot;%lld&quot;,&amp;tmp);</span><br><span class=\"line\">        ns[i] = tmp - la;</span><br><span class=\"line\">\t\tadd(i ,tmp - la ,n); //插入这个节点</span><br><span class=\"line\">        add2(i ,(tmp - la) * i ,n);</span><br><span class=\"line\">        //cout&lt;&lt;ns[i]&lt;&lt;endl;</span><br><span class=\"line\">        la = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//ask&amp;query</span><br><span class=\"line\">\tll x,y,z; //存放输入same</span><br><span class=\"line\">\tfor(ll i=1;i&lt;=m;i++)&#123;</span><br><span class=\"line\">\t\tll op;</span><br><span class=\"line\">        scanf(&quot;%lld&quot; ,&amp;op);</span><br><span class=\"line\">        if (op == 1) &#123;</span><br><span class=\"line\">            scanf(&quot;%lld %lld %lld&quot; ,&amp;x ,&amp;y ,&amp;z);</span><br><span class=\"line\">            ns[x] += z;</span><br><span class=\"line\">            ns[y+1] -= z;</span><br><span class=\"line\">            add(x ,z ,n);</span><br><span class=\"line\">            add(y+1 ,-z ,n);</span><br><span class=\"line\">            add2(x , z * x ,n);</span><br><span class=\"line\">            add2(y+1 , -z * (y+1) ,n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            scanf(&quot;%lld %lld&quot; ,&amp;x ,&amp;y);</span><br><span class=\"line\">            ll ans = 0;</span><br><span class=\"line\">            ans += ( (y+1) * query(y) -  query2(y));</span><br><span class=\"line\">            ans -= ( (x) * query(x-1) - query2(x-1));</span><br><span class=\"line\">            printf(&quot;%lld\\n&quot; ,ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"二维树状数组\"><a href=\"#二维树状数组\" class=\"headerlink\" title=\"二维树状数组\"></a>二维树状数组</h5><p>解决矩阵前缀和（偏序前缀和）</p>\n<p>不管差分的数字多奇怪，二维差分的定义永远是逆运算。</p>\n<p>上帝造题的七分钟！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2070</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ns[N][N] ,xx[N][N] ,yy[N][N] ,xy1[N][N] ,xy2[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n ,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lb</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &amp; (-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x ,<span class=\"type\">int</span> y ,<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=x ;i&lt;=n ;i+=<span class=\"built_in\">lb</span>(i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=y ;j&lt;=m ;j+=<span class=\"built_in\">lb</span>(j)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// out&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">\t\t\txy1[i][j] += val;</span><br><span class=\"line\">\t\t\tyy[i][j] += val * y;</span><br><span class=\"line\">\t\t\txx[i][j] += val * x;</span><br><span class=\"line\">\t\t\txy2[i][j] += val * x * y;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x ,<span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x ;i ;i-=<span class=\"built_in\">lb</span>(i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=y ;j ;j-=<span class=\"built_in\">lb</span>(j)) &#123;</span><br><span class=\"line\">\t\t\tres += (x+<span class=\"number\">1</span>)*(y+<span class=\"number\">1</span>)*xy1[i][j] - (y+<span class=\"number\">1</span>)*xx[i][j] - (x+<span class=\"number\">1</span>)*yy[i][j] + xy2[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> in;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt;in &gt;&gt;n &gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"type\">char</span> op;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,&amp;op);) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (op == <span class=\"string\">&#x27;L&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x1 ,y1 ,x2 ,y2 ,val;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d %d&quot;</span> ,&amp;x1 ,&amp;y1 ,&amp;x2 ,&amp;y2 ,&amp;val);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(x1 ,y1 ,val);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(x2+<span class=\"number\">1</span> ,y2+<span class=\"number\">1</span> ,val);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(x1 ,y2+<span class=\"number\">1</span> ,-val);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(x2+<span class=\"number\">1</span> ,y1 ,-val);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x1 ,y1 ,x2 ,y2;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span> ,&amp;x1 ,&amp;y1 ,&amp;x2 ,&amp;y2);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res1 = <span class=\"built_in\">query</span>(x2 ,y2);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res2 = <span class=\"built_in\">query</span>(x1<span class=\"number\">-1</span> ,y1<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res3 = -<span class=\"built_in\">query</span>(x1<span class=\"number\">-1</span> ,y2);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res4 = -<span class=\"built_in\">query</span>(x2 ,y1<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res = res1 + res2 + res3 + res4;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span> ,res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"树状数组二分\"><a href=\"#树状数组二分\" class=\"headerlink\" title=\"树状数组二分\"></a>树状数组二分</h5><p>神秘卡常题？！！</p>\n<h3 id=\"今日秒杀题\"><a href=\"#今日秒杀题\" class=\"headerlink\" title=\"今日秒杀题\"></a>今日秒杀题</h3><p>发现把题目看错了，或许并没有这么难？</p>\n<p>注意到一个数列可以删完，充要条件如下：</p>\n<p>数字n有k个，n-k有k_1个，以此类推，n - \\sum k 有 0 个。</p>\n<p>然后我们观察可以进行的操作：左移，右移。</p>\n<p>诶——————！我们发现什么时候是可以的？我们把这个k展开成k个1，铺开，要是这些1把1-n填满了，就是合理的！</p>\n<p>为什么这么想？因为左移右移操作很方便啊！所有1都向左右偏移即可！但是整体偏移是很麻烦的，但是我们可以变换参考系一般的移动零点，这样时间复杂度大大降低了！</p>\n<p>那么我自己改的时候也很简单，只要把不符合的数大力修改成符合的数就可以了。为什么这样步数最小？如果你不这么干你就得平移，而你平移也至少需要这么多步数才能让所有格子可能被填满，即平移的操作对输入以外的操作毫无必要。于是问题更简单了：每次查询就是问区间中有几个数没有被填上。</p>\n<p>我觉得问题已经足够简单且可写了，finish。</p>\n","tags":["oi"]},{"title":"New_Start","url":"/posts/24dfbbf5/","content":"<p>好吧 之前写的很长一篇没写md复制不上来，麻了         </p>\n<p>以此作为界线，开始一个新的时期</p>\n<hr>\n","tags":["other"]},{"title":"New_Start","url":"/posts/24dfbbf5/","content":"<p>好吧 之前写的很长一篇没写md复制不上来，麻了         </p>\n<p>以此作为界线，开始一个新的时期</p>\n<hr>\n","tags":["other"]},{"title":"passwords","url":"/posts/289bdoxh/","content":"<h1 id=\"just-a-test-for-function-of-password\"><a href=\"#just-a-test-for-function-of-password\" class=\"headerlink\" title=\"just a test for function of password!!\"></a>just a test for function of password!!</h1>","tags":["other"]},{"title":"1210信友队","url":"/posts/1532f9c1/","content":"<p>很奇怪的，今天突然变成了oi赛制，然后开心地褒姒了</p>\n<hr>\n<h2 id=\"T1-最小均值\"><a href=\"#T1-最小均值\" class=\"headerlink\" title=\"T1 最小均值\"></a>T1 <a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18969&fragments=58804&problemId=11032\">最小均值</a></h2><p>老师说这是一个很经典的分数规划，虽然我听不懂这是什么，但是考试的时候还是想出来做法。</p>\n<p>要求最小值问题，加上这题明显不可以贪心，那必定是地皮或者二分。</p>\n<p>然后想到，均值乘上边数和这个环上边权之和是一样的。所以就可以转换为将所有边权减去答案，然后spfa找负环的问题。这样的最优性问题使用二分解决就是显然的了。</p>\n<p>题解上还有一个柿子，但是我觉得，没必要，这样已经很清楚了。</p>\n<p>○：luoguP3199</p>\n<h2 id=\"T2-路线规划\"><a href=\"#T2-路线规划\" class=\"headerlink\" title=\"T2 路线规划\"></a>T2 <a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18969&fragments=58804&problemId=15784\">路线规划</a></h2><p>好，开题，看题目，瞧了一瞧发现要算期望！！我天呢，然后我就润了</p>\n<p>然后老师开始讲题，发现只要所有的期望加起来就好了，似乎完全就是一个黄题</p>\n<p>原来是这样吗，那我真是小丑了。不过这次两道题都很会卡精度哦，这是坏的。</p>\n<p>乍一眼看，这一题的情景很像图上的背包，虽然这个想法很离谱，但是也不至于八竿子打不着边：我们考虑使用地皮。再者：<em>两个人游玩的过程完全一样又互相不影响</em>，唯一的区别就是b1i或者b2i。所以说，只要会了一个人怎么算，另一个人的算法也是显然的。用<em>f(i,j)<em>表示当前到了第</em>i</em>个点，第<em>j</em>分钟。转移的时候取其中一种转移的概率就是 1&#x2F;路径条数。那么期望再乘上价值就好了。<br>$$<br>f(i,j)×\\frac{1}{x} \\to f[k][j+t(i,k)+c(k)] \\<br>ans &#x3D; \\sum^n_{i&#x3D;1} \\sum_j h_i ×f(i,j)\\<br>O(nm)的复杂度<br>$$</p>\n<p>以后遇到了概率的题，牢记概率的总和是1.然后这个1会分成n份不断地走到下一步的状态，然后这样一直分下去。<b>并且总和始终不变，收益喝前喝后也没有关系</b>，所以一般下一步就是将期望收益去乘上概率。然后发现，概率似乎也没有这么可怕了？<del>你可真是站着说话不腰疼</del></p>\n<hr>\n<h2 id=\"T3回文串\"><a href=\"#T3回文串\" class=\"headerlink\" title=\"T3回文串\"></a>T3<a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18969&fragments=58804&problemId=11033\">回文串</a></h2><p>这一题一看就有一堆做法。什么PAM什么hash什么地皮和二位前缀和</p>\n<p>题解用了二维前缀和那种做法，至于我，我是傻逼</p>\n<hr>\n<p>下面就是一些单独讲的题目了</p>\n","tags":["oi"]},{"title":"杭二学科营-基本不等式","url":"/posts/884b5dd9/","content":""},{"title":"11.12 xyd练习","url":"/posts/34045630/","content":"<p>这次练习结果十分之惨，基本上题目都没拿分。离谱。<br>另外信友队的题目最近都没什么原题了，这是好的。（但是没有双倍经验了ww）                                             </p>\n<p>T1：<a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18948&fragments=58800&problemId=11016\">丑数</a>                 </p>\n<p>话说网络上真的好多丑数的题啊，这道最不应该的就是把题意理解错了。我以为因数只能有这些质数，然后想到了一个方法最后输出了15。额……十分尴尬              </p>\n<p>十分魔幻的是，我后来发现了洛谷上有一道usaco题意和我错误理解的题意是一样的，于是莫名其妙的经验get了！        </p>\n<p>这题的正解大概就是二分。使用容斥原理，要求出一个数以下包含多少个丑数是很容易的。而且他的素数是均匀随机的。所以我们dfs的时间复杂度也并不会很高。但是我以为他的复杂度是nlogn所以没有写，然而实际上相当于只有一个常数带一个log，顶不到n。<br>$$<br>ans &#x3D; \\sum_{S \\in T }(-1)^{|S|-1}(\\lfloor \\frac{n}{\\prod _ {a_i\\in S}a_i} \\rfloor)<br>$$<br>最后是使用我错解的程序改了一改变成50分暴力交掉了。</p>\n<hr>\n<p>T2：<a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18948&fragments=58800&problemId=15806\">一长串题目名字我也懒得打</a></p>\n<p>题目却和题目名字相反：它只有几个柿子<br>$$<br>Have: σ k(n) &#x3D; \\sum _{d|n} d^k，ball: \\sum^n{i&#x3D;1} \\sigma_k(i) \\mod 10^9+7\\</p>\n<p>circlePersimmon &#x3D; \\sum^n{i&#x3D;1}\\sum{d|i}d^k &#x3D; \\sum^n_{d&#x3D;1}d^k\\lfloor \\frac d {p(d)} \\rfloor^k<br>$$<br>（因为发现公式里塞中文会炸掉所以进行了一些迫真英语</p>\n<p>就是这么简单。然后我们仔细观察这个柿子，发现了一个<code>d|n</code>。这个时候我们理应警觉起来：其实这道题目很可能还是在搞因数。想到这些幂的计算是否有一些累赘？所以考虑一个d的最小质因子p(d)，则有：<br>$$<br>d^k &#x3D; (p(d)\\frac d {p(d)})^k &#x3D; p(d)^k(\\frac d {p(d)})^k<br>$$</p>\n<p>所以说如果d不是质数的话，就会存在一个p(d)，然后推出来就可以O(1)得到k次幂的值，所以只需要计算每一个质数的k次幂。看到质数、快速幂、O(1)这些要素，dna就可以开始动了：使用线性筛求出p(d)。时间复杂度是log级别的             </p>\n<p>然而我的dna动错了。我看到那一堆要素想到了数论分块，所以遗憾离场。</p>\n<hr>\n<p>T3：<a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18948&fragments=58800&problemId=15756\">时间区间</a></p>\n<p>看到这个题和样例就可以明白：这就是线段树      </p>\n<p>然后仔细观察样例和题意：如果把每一个操作当做一个元素，实际上对于一个区间来说就是在<b>进行这些操作的前缀和</b>。然而我们还有时间这一个要素，明显没有那么好做。         </p>\n<p>但是这是一个传统的区间求和的线段树啊，那么用不了直接的前缀和就退而求其次使用<b>差分</b>。于是这道题基本就是做出来了：开两个线段树维护差分，在pushdown里面写两遍操作。代码难度十分的简单。相对于思路是简单多了           </p>\n<p>赛时实际上想出来了这一题的正解，但是没有写出来。<del>主要还是太摆烂了</del></p>\n<hr>\n<p>T4：<a href=\"https://www.xinyoudui.com/contest?courses=676&books=659&pages=18948&fragments=58800&problemId=9648\">礼尚往来</a></p>\n<p>这道题打了20分的暴力：按照题意直接模拟，发现返回的A值就是区间中的最大值。狂扫一个区间就可以暴力获得20分了！然而实际上我还查了口气，只需要维护一个优先队列，每次取出最大值和A交换就可以极为简短的完成 <em>l&#x3D;1,r&#x3D;n</em> 的数据，获得更多的分数。          </p>\n<p>接下来来看正解：考虑使用分块：将序列分成若干个块，对于每一个块都维护一个上述的优先队列，如果有一个块被查询的区间完全覆盖了，就可以优先队列<em>log</em>的时间复杂度完成一次和A的交换。     </p>\n<p>相反的，如果块属于区间的两端，就必须要重构了。根据记录的信息还原：有很多个A来过，用一个小根堆保存这些A。然后扫一遍块，对于某一个位置上的x来说，如果有很多个A来过，就把小根堆的头拿出来放到x里面。如此扫完每一个x。设块的长度是B，时间复杂度就是BlogB。</p>\n<p>最后时间复杂度是典中典的分块时间复杂度：B可以约等于为根号n，所以得到复杂度<br>$$<br>O(q\\sqrt n \\log n)<br>$$<br>（一个作为代码块屹立在整一篇题解最后的中央的分块复杂度好好笑2333</p>\n","tags":["oi"]},{"title":"guess what?","url":"/posts/ed4f3278/","content":"<p>啥？</p>\n"},{"title":"Hello World","url":"/posts/4a17b156/","content":"<p>大家好啊！我是AnteAntibe。由于之前一个博客炸了所以新开了一个                </p>\n<p>2009年生日，目前<code>高一</code>。坐标杭州，学校是十四凤起。中考考砸了是这样的。          </p>\n<p>是oier，平时随便写写题，周末随缘atc一下的摆烂选手。        </p>\n<p>成分方面，烂大街的二游是玩的，番看得是很少的。烂大街的引诱是玩的，曲子也是听的（引诱，术力口，还有三个好亲友推歌）。pgrrks大概15.3左右，arc刚红框，4k只能3dan。玩过月计，玩过ut，还有一些别的，现在都没什么浓度了。    </p>\n<p>总结：学习烂，水平烂，各方面都很失败的落魄颓废人。      </p>\n<p>今天也没什么时间了（瞧我markdown都没怎么用 ），最后贴几个东西吧：     </p>\n<p><a href=\"https://www.luogu.com.cn/user/374452\">Luogu</a> ， <a href=\"https://space.bilibili.com/490092552?spm_id_from=333.1007.0.0\">B站</a>，QQ：1942459191    平台上的昵称基本都是AnteAntibe，也不会有什么重名就是了</p>\n<p>常用的剪贴板：note.ms&#x2F;wsr     note.ms&#x2F;hyf    note.ms&#x2F;Ante     note.ms&#x2F;AnteAntibe    note.ms&#x2F;yrd</p>\n"}]